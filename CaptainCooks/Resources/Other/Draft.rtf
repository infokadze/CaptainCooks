{\rtf1\ansi\ansicpg1252\cocoartf2636
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;\f2\fswiss\fcharset0 Helvetica;
}
{\colortbl;\red255\green255\blue255;\red255\green255\blue255;\red31\green31\blue36;\red108\green121\blue134;
\red161\green103\blue230;\red252\green106\blue93;\red252\green95\blue163;\red103\green183\blue164;\red208\green191\blue105;
\red65\green161\blue192;\red208\green168\blue255;\red208\green168\blue255;\red108\green121\blue134;}
{\*\expandedcolortbl;;\csgenericrgb\c100000\c100000\c100000\c85000;\csgenericrgb\c12054\c12284\c14131;\csgenericrgb\c42394\c47462\c52518;
\csgenericrgb\c63137\c40392\c90196;\csgenericrgb\c98912\c41558\c36568;\csgenericrgb\c98839\c37355\c63833;\csgenericrgb\c40538\c71705\c64209;\csgenericrgb\c81498\c74939\c41233;
\csgenericrgb\c25490\c63137\c75294;\csgenericrgb\c81569\c65882\c100000;\csgenericrgb\c81681\c65692\c99927;\csgenericrgb\c42394\c47462\c52518\c45000;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\deftab642
\pard\tx642\pardeftab642\pardirnatural\partightenfactor0

\f0\fs26 \cf2 \cb3 \
\pard\tx642\pardeftab642\pardirnatural\partightenfactor0
\cf4 //      \
//                NotificationCenter.default.post(name: Notification.Name(rawValue: "updateToFifthLevel"), object: nil)\
\
  NotificationCenter.default.addObserver(forName: Notification.Name(rawValue: "updateToFirsthLevel"), object: nil, queue: nil) \{ (notification) in\cf2 \
\cf4 //            self.labelText.text = """\cf2 \
\cf4 //                You are going to play on the first level!\cf2 \
\cf4 //                """\cf2 \
\cf4 //        \}\cf2 \
\cf4 //\cf2 \
\cf4 //        NotificationCenter.default.addObserver(forName: Notification.Name(rawValue: "updateToSecondLevel"), object: nil, queue: nil) \{ (notification) in\cf2 \
\cf4 //            self.labelText.text = """\cf2 \
\cf4 //                                You are going to play on the second level!\cf2 \
\cf4 //                """\cf2 \
\cf4 //        \}\cf2 \
\cf4 //\cf2 \
\cf4 //        NotificationCenter.default.addObserver(forName: Notification.Name(rawValue: "updateToThirdLevel"), object: nil, queue: nil) \{ (notification) in\cf2 \
\cf4 //            self.labelText.text = """\cf2 \
\cf4 //                                You are going to play on the third level!\cf2 \
\cf4 //                """\cf2 \
\cf4 //        \}\cf2 \
\cf4 //\cf2 \
\cf4 //        NotificationCenter.default.addObserver(forName: Notification.Name(rawValue: "updateToForthLevel"), object: nil, queue: nil) \{ (notification) in\cf2 \
\cf4 //            self.labelText.text = """\cf2 \
\cf4 //                                You are going to play on the forth level!\cf2 \
\cf4 //                """\cf2 \
\cf4 //        \}\cf2 \
\cf4 //\cf2 \
\cf4 //        NotificationCenter.default.addObserver(forName: Notification.Name(rawValue: "updateToFifthLevel"), object: nil, queue: nil) \{ (notification) in\cf2 \
\cf4 //            self.labelText.text = """\cf2 \
\cf4 //                                You are going to play on the fifth level!\cf2 \
\cf4 //                """\cf2 \
\cf4 //        \}\cf2 \
\
\cf4 //        NotificationCenter.default.addObserver(self, selector: #selector(updateToFirstLevel), name: Notification.Name(rawValue: "updateToFirstLevel") , object: nil)\cf2 \
\cf4 //\cf2 \
\cf4 //        NotificationCenter.default.addObserver(self, selector: #selector(updateToSecondLevel), name: Notification.Name(rawValue: "updateToSecondLevel") , object: nil)\cf2 \
\cf4 //\cf2 \
\cf4 //        NotificationCenter.default.addObserver(self, selector: #selector(updateToThirdLevel), name: Notification.Name(rawValue: "updateToThirdLevel") , object: nil)\cf2 \
\cf4 //\cf2 \
\cf4 //        NotificationCenter.default.addObserver(self, selector: #selector(updateToForthLevel), name: Notification.Name(rawValue: "updateToForthLevel") , object: nil)\cf2 \
\cf4 //\cf2 \
\cf4 //        NotificationCenter.default.addObserver(self, selector: #selector(updateToFifthLevel), name: Notification.Name(rawValue: "updateToFifthLevel") , object: nil)\cf2 \
\
\
class SlotsModel: UIView \{\
\
    static func getSlots(countOfItem: Int, countOfRorwsInTable: Int) ->  [[Int]] \{\
        var slots: [[Int]] = []\
               \
        for _ in 0..<(countOfItem) \{\
            var array: [Int] = []\
            \
            for number in 0..<(countOfRorwsInTable / 2) \{\
                array.append(number)\
            \}\
            \
            array += array\
            slots.append(array.shuffled())\
        \}\
        return slots\
    \}    \
\}\
       \
                \
\
\pard\tx642\pardeftab642\pardirnatural\partightenfactor0
\cf5 print\cf2 (\cf6 "RES0"\cf2 )\
                \cf5 print\cf2 (
\f1\b \cf7 self
\f0\b0 \cf2 .\cf8 dataModel\cf2 [\cf9 0\cf2 ][\cf9 0\cf2 ])\
                \cf5 print\cf2 (
\f1\b \cf7 self
\f0\b0 \cf2 .\cf8 dataModel\cf2 [\cf9 1\cf2 ][\cf9 0\cf2 ])\
                \cf5 print\cf2 (
\f1\b \cf7 self
\f0\b0 \cf2 .\cf8 dataModel\cf2 [\cf9 2\cf2 ][\cf9 0\cf2 ])\
                \cf5 print\cf2 (
\f1\b \cf7 self
\f0\b0 \cf2 .\cf8 dataModel\cf2 [\cf9 3\cf2 ][\cf9 0\cf2 ])\
                \cf5 print\cf2 (
\f1\b \cf7 self
\f0\b0 \cf2 .\cf8 dataModel\cf2 [\cf9 4\cf2 ][\cf9 0\cf2 ])\
                \
                \cf5 print\cf2 (
\f1\b \cf7 self
\f0\b0 \cf2 .\cf8 dataModel\cf2 [\cf9 5\cf2 ][\cf9 0\cf2 ])\
                \cf5 print\cf2 (
\f1\b \cf7 self
\f0\b0 \cf2 .\cf8 dataModel\cf2 [\cf9 6\cf2 ][\cf9 0\cf2 ])\
                \cf5 print\cf2 (
\f1\b \cf7 self
\f0\b0 \cf2 .\cf8 dataModel\cf2 [\cf9 7\cf2 ][\cf9 0\cf2 ])\
                \cf5 print\cf2 (
\f1\b \cf7 self
\f0\b0 \cf2 .\cf8 dataModel\cf2 [\cf9 8\cf2 ][\cf9 0\cf2 ])\
                \cf5 print\cf2 (
\f1\b \cf7 self
\f0\b0 \cf2 .\cf8 dataModel\cf2 [\cf9 9\cf2 ][\cf9 0\cf2 ])\
                \
                \cf5 print\cf2 (
\f1\b \cf7 self
\f0\b0 \cf2 .\cf8 dataModel\cf2 [\cf9 10\cf2 ][\cf9 0\cf2 ])\
                \cf5 print\cf2 (
\f1\b \cf7 self
\f0\b0 \cf2 .\cf8 dataModel\cf2 [\cf9 11\cf2 ][\cf9 0\cf2 ])\
                \cf5 print\cf2 (
\f1\b \cf7 self
\f0\b0 \cf2 .\cf8 dataModel\cf2 [\cf9 12\cf2 ][\cf9 0\cf2 ])\
                \cf5 print\cf2 (
\f1\b \cf7 self
\f0\b0 \cf2 .\cf8 dataModel\cf2 [\cf9 13\cf2 ][\cf9 0\cf2 ])\
                \cf5 print\cf2 (
\f1\b \cf7 self
\f0\b0 \cf2 .\cf8 dataModel\cf2 [\cf9 14\cf2 ][\cf9 0\cf2 ])\
                    \
                \
\
\
\cf5 				print\cf2 (\cf6 "RES17"\cf2 )\
                \cf5 print\cf2 (
\f1\b \cf7 self
\f0\b0 \cf2 .\cf8 dataModel\cf2 [\cf9 0\cf2 ][\cf9 17\cf2 ])\
                \cf5 print\cf2 (
\f1\b \cf7 self
\f0\b0 \cf2 .\cf8 dataModel\cf2 [\cf9 1\cf2 ][\cf9 17\cf2 ])\
                \cf5 print\cf2 (
\f1\b \cf7 self
\f0\b0 \cf2 .\cf8 dataModel\cf2 [\cf9 2\cf2 ][\cf9 17\cf2 ])\
                \cf5 print\cf2 (
\f1\b \cf7 self
\f0\b0 \cf2 .\cf8 dataModel\cf2 [\cf9 3\cf2 ][\cf9 17\cf2 ])\
                \cf5 print\cf2 (
\f1\b \cf7 self
\f0\b0 \cf2 .\cf8 dataModel\cf2 [\cf9 4\cf2 ][\cf9 17\cf2 ])\
                \
                \cf5 print\cf2 (
\f1\b \cf7 self
\f0\b0 \cf2 .\cf8 dataModel\cf2 [\cf9 5\cf2 ][\cf9 17\cf2 ])\
                \cf5 print\cf2 (
\f1\b \cf7 self
\f0\b0 \cf2 .\cf8 dataModel\cf2 [\cf9 6\cf2 ][\cf9 17\cf2 ])\
                \cf5 print\cf2 (
\f1\b \cf7 self
\f0\b0 \cf2 .\cf8 dataModel\cf2 [\cf9 7\cf2 ][\cf9 17\cf2 ])\
                \cf5 print\cf2 (
\f1\b \cf7 self
\f0\b0 \cf2 .\cf8 dataModel\cf2 [\cf9 8\cf2 ][\cf9 17\cf2 ])\
                \cf5 print\cf2 (
\f1\b \cf7 self
\f0\b0 \cf2 .\cf8 dataModel\cf2 [\cf9 9\cf2 ][\cf9 17\cf2 ])\
                \
                \cf5 print\cf2 (
\f1\b \cf7 self
\f0\b0 \cf2 .\cf8 dataModel\cf2 [\cf9 10\cf2 ][\cf9 17\cf2 ])\
                \cf5 print\cf2 (
\f1\b \cf7 self
\f0\b0 \cf2 .\cf8 dataModel\cf2 [\cf9 11\cf2 ][\cf9 17\cf2 ])\
                \cf5 print\cf2 (
\f1\b \cf7 self
\f0\b0 \cf2 .\cf8 dataModel\cf2 [\cf9 12\cf2 ][\cf9 17\cf2 ])\
                \cf5 print\cf2 (
\f1\b \cf7 self
\f0\b0 \cf2 .\cf8 dataModel\cf2 [\cf9 13\cf2 ][\cf9 17\cf2 ])\
                \cf5 print\cf2 (
\f1\b \cf7 self
\f0\b0 \cf2 .\cf8 dataModel\cf2 [\cf9 14\cf2 ][\cf9 17\cf2 ])    \
   \
\
 
\f1\b \cf7 func
\f0\b0 \cf2  \cf10 tableView\cf2 (\cf10 _\cf2  tableView: \cf11 UITableView\cf2 , \cf10 didSelectRowAt\cf2  indexPath: \cf12 IndexPath\cf2 ) \{\
\pard\tx642\pardeftab642\pardirnatural\partightenfactor0
\cf4 //        print("tableView tag is \\(tableView.tag)")\cf2 \
\cf4 //        print("indexpath is \\(indexPath)")\cf2 \
        \
\cf4 // experimenting\cf2 \
\cf4 //        let nums = Int.random(in: 0...17, excluding: indexPath.item)\cf2 \
\cf4 //        tableView.scrollToRow(at: [0, nums], at: .middle, animated: true)\cf2 \
    \}\
\
\
\cf4 //        NotificationCenter.default.addObserver(self,\cf2 \
\cf4 //                                               selector: #selector(applicationWillTerminate),\cf2 \
\cf4 //                                               name: UIApplication.willTerminateNotification,\cf2 \
\cf4 //                                               object: nil)\cf2 \
\
    \
\cf4 //    @objc func applicationWillTerminate() \{\cf2 \
        \
\cf4 //        let calendar = Calendar.current\cf2 \
\cf4 //        let dateToCompare = UserDefault.currentDate\cf2 \
\cf4 //\cf2 \
\cf4 //        if calendar.isDateInTomorrow(dateToCompare) \{\cf2 \
\cf4 //            UserDefault.currentDate = Date()\cf2 \
\cf4 //        \} else \{\cf2 \
\cf4 //            UserDefault.currentDate = Date()\cf2 \
\cf4 //        \}\cf2 \
\cf4 //    \}\cf2 \
    \
\
\cf4 //\} else if allCoin <= 0 \{\cf2 \
\cf4 //    gameView.setCustom(view.sorryView, height: 220, width: 346)\cf2 \
\cf4 //    gameView.animateIn(view.sorryView)\cf2 \
\cf4 //\}\cf2 \
\cf4 //\}\cf2 \
    \
\cf4 //    #warning("set to the button on main screen")\cf2 \
\cf4 //    if indexPath.item == 0 \{\cf2 \
\cf4 //        let controller = self.storyboard?.instantiateViewController(withIdentifier: "SlotViewController") as! SlotViewController\cf2 \
\cf4 //        controller.slotsElements = slotsElementsPack2\cf2 \
\cf4 //        self.navigationController?.pushViewController(controller, animated: true)\cf2 \
\cf4 //    \} else if indexPath.item == 1 \{\cf2 \
\cf13 ///
\f2 \cf4 /            if Level.shared.level >= 2 \{
\f0 \cf2 \
\cf4 //            let controller = self.storyboard?.instantiateViewController(withIdentifier: "SlotViewController") as! SlotViewController\cf2 \
\cf4 //            controller.slotsElements = slotsElementsPack1\cf2 \
\cf4 //            self.navigationController?.pushViewController(controller, animated: true)\cf2 \
\cf13 ///
\f2 \cf4 /            \}
\f0 \cf2 \
\cf4 //    \} else if indexPath.item == 2 \{\cf2 \
\cf4 //        if Level.shared.coinsPool >= 5000 \{\cf2 \
\cf4 //            UserDefaultsManager.LevelChoose = 2\cf2 \
\cf4 //            Level.shared.coinsPool = Level.shared.coinsPool - 5000\cf2 \
\cf4 //        \}\cf2 \
\cf4 //        if UserDefaultsManager.LevelChoose == 2 \{\cf2 \
\cf4 //            let controller = self.storyboard?.instantiateViewController(withIdentifier: "SlotViewController") as! SlotViewController\cf2 \
\cf4 //            controller.slotsElements = slotsElementsPack2\cf2 \
\cf4 //            self.navigationController?.pushViewController(controller, animated: true)\cf2 \
\cf4 //        \}\cf2 \
\cf4 //    \} else if indexPath.item == 3 \{\cf2 \
\cf4 //        if Level.shared.coinsPool >= 8000 \{\cf2 \
\cf4 //            UserDefaultsManager.LevelChoose = 2\cf2 \
\cf4 //            Level.shared.coinsPool = Level.shared.coinsPool - 8000\cf2 \
\cf4 //        \}\cf2 \
\cf4 //        if UserDefaultsManager.LevelChoose == 2 \{\cf2 \
\cf4 //            let controller = self.storyboard?.instantiateViewController(withIdentifier: "SlotViewController") as! SlotViewController\cf2 \
\cf4 //            controller.slotsElements = slotsElementsPack1\cf2 \
\cf4 //            self.navigationController?.pushViewController(controller, animated: true)\cf2 \
\cf4 //        \}\cf2 \
\cf4 //    \} else \{\cf2 \
\cf4 //        return\cf2 \
\cf4 //    \}\cf2 \
\cf4 //\}\cf2 \
\cf4 //\}\cf2 \
\cf4 //\cf2 \
\cf4 //    #warning("level to choose -> screen appearance")\cf2 \
\cf4 //    if UserDefaultsManager.LevelChoose == 0 \{\cf2 \
\cf4 //        for i in 1...4 \{\cf2 \
\cf4 //            imagesArray.append(UIImage(named: "\\(i)")!)\cf2 \
\cf4 //        \}\cf2 \
\cf4 //    \}else if UserDefaultsManager.LevelChoose == 2 \{\cf2 \
\cf4 //        imagesArray.removeAll()\cf2 \
\cf4 //        imagesArray.append(UIImage(named: "\\(1)")!)\cf2 \
\cf4 //        imagesArray.append(UIImage(named: "\\(2)")!)\cf2 \
\cf4 //        imagesArray.append(UIImage(named: "\\(5)")!)\cf2 \
\cf4 //        imagesArray.append(UIImage(named: "\\(4)")!)\cf2 \
\cf4 //    \}else if UserDefaultsManager.LevelChoose == 3 \{\cf2 \
\cf4 //        imagesArray.removeAll()\cf2 \
\cf4 //        imagesArray.append(UIImage(named: "\\(1)")!)\cf2 \
\cf4 //        imagesArray.append(UIImage(named: "\\(2)")!)\cf2 \
\cf4 //        imagesArray.append(UIImage(named: "\\(5)")!)\cf2 \
\cf4 //        imagesArray.append(UIImage(named: "\\(6)")!)\cf2 \
\cf4 //    \}\cf2 \
\cf4 //\cf2 \
\cf4 //    #warning("+ - buttons")\cf2 \
\cf4 //    @IBAction func bet25MoreCoins(_ sender: UIButton) \{\cf2 \
\cf4 //        if coinsToBet < 300 \{\cf2 \
\cf4 //            coinsToBet += 25\cf2 \
\cf4 //            coinsToBetButton.setTitle("\\(coinsToBet)", for: .normal)\cf2 \
\cf4 //        \}\cf2 \
\cf4 //    \}\cf2 \
\cf4 //\cf2 \
\cf4 //\cf2 \
\cf4 //    @IBAction func bet25LessCoins(_ sender: UIButton) \{\cf2 \
\cf4 //        if coinsToBet > 25 \{\cf2 \
\cf4 //            coinsToBet -= 25\cf2 \
\cf4 //            coinsToBetButton.setTitle("\\(coinsToBet)", for: .normal)\cf2 \
\cf4 //        \}\cf2 \
\cf4 //    \}\cf2 \
\cf4 //    #warning("coins to bet")\cf2 \
\cf4 //    private var coinsToBet = 25\cf2 \
\cf4 //\cf2 \
\cf4 //    @IBOutlet weak var coinsToBetButton: UIButton!\{\cf2 \
\cf4 //        didSet \{\cf2 \
\cf4 //            coinsToBetButton.setTitle("\\(coinsToBet)", for: .normal)\cf2 \
\cf4 //        \}\cf2 \
\cf4 //    \}\cf2 \
\cf4 //\cf2 \
\cf4 //    #warning("coins balance")\cf2 \
\cf4 //    private var balance = Level.shared.coinsPool \{\cf2 \
\cf4 //        didSet \{\cf2 \
\cf4 //            Level.shared.coinsPool = coinsPool\cf2 \
\cf4 //            coinsCounterButton.setTitle("\\(coinsPool)", for: .normal)\cf2 \
\cf4 //        \}\cf2 \
\cf4 //    \}\cf2 \
\cf4 //\cf2 \
\cf4 //    #warning("music button")\cf2 \
\cf4 //    @IBAction func musicTapped(_ sender: Any) \{\cf2 \
\cf13 ///
\f2 \cf4 /        if ismusicPlaying == false \{
\f0 \cf2 \
\cf13 ///
\f2 \cf4 /            backgroundPlayer.cheer()
\f0 \cf2 \
\cf13 ///
\f2 \cf4 /            ismusicPlaying = true
\f0 \cf2 \
\cf13 ///
\f2 \cf4 /        \}else \{
\f0 \cf2 \
\cf13 ///
\f2 \cf4 /            backgroundPlayer.stop()
\f0 \cf2 \
\cf13 ///
\f2 \cf4 /            ismusicPlaying = false
\f0 \cf2 \
\cf13 ///
\f2 \cf4 /        \}
\f0 \cf2 \
\cf4 //        if Level.shared.musicOn == false \{\cf2 \
\cf4 //            backgroundPlayer.cheer()\cf2 \
\cf4 //            Level.shared.musicOn = true\cf2 \
\cf4 //        \}else \{\cf2 \
\cf4 //            backgroundPlayer.stop()\cf2 \
\cf4 //            Level.shared.musicOn = false\cf2 \
\cf4 //        \}\cf2 \
\cf4 //    \}}